// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @db.Uuid
    userId            String  @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    metadata          Json    @default("{}")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime @db.Timestamptz(3)
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                   String                 @id @db.Uuid
    name                 String?
    email                String?                @unique
    emailVerified        DateTime?
    image                String?
    metadata             Json                   @default("{}")
    accounts             Account[]
    sessions             Session[]
    authenticators       Authenticator[]
    userPendingAssertion UserPendingAssertions?
    createdAt            DateTime               @default(now()) @db.Timestamptz(3)
    updatedAt            DateTime               @updatedAt @db.Timestamptz(3)

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @db.Timestamptz(3)

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model UserPendingAssertions {
    userId    String   @id @db.Uuid
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    challenge String
    expiresAt DateTime @db.Timestamptz(3)
}

model PendingAssertions {
    email        String   @id
    futureUserId String   @unique @db.Uuid
    challenge    String
    expiresAt    DateTime @db.Timestamptz(3)
}

model Authenticator {
    userId                        String   @db.Uuid
    credentialID                  Bytes    @id
    credentialPublicKey           Bytes
    counter                       BigInt
    credentialDeviceType          String
    credentialBackedUp            Boolean
    transports                    String[]
    createdAt                     DateTime @default(now()) @db.Timestamptz(3)
    updatedAt                     DateTime @updatedAt @db.Timestamptz(3)
    user                          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    metadata                      Json     @default("{}")
    attestationObject             Bytes?
    authenticatorExtensionResults Bytes?

    @@map("authenticators")
}
